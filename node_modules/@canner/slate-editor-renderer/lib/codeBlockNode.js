"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.codeLineNode = exports.codeBlockNode = void 0;

var React = _interopRequireWildcard(require("react"));

var _antd = require("antd");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _components = require("prismjs/components.json");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n  position: absolute;\n  right: 2px;\n  top: 2px;\n  font-size: 14px;\n  padding: 4px;\n  color: #555;\n  border-radius: 3px;\n  text-transform: uppercase;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  position: relative;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var Option = _antd.Select.Option;

var CodeblockContainer = _styledComponents.default.div(_templateObject());

var CodeblockLang = _styledComponents.default.div(_templateObject2());

var codeBlockNode = function codeBlockNode(options) {
  var CodeBlockComponent = function CodeBlockComponent(_ref) {
    var attributes = _ref.attributes,
        children = _ref.children,
        node = _ref.node,
        editor = _ref.editor;
    var syntax = options.getSyntax(node);

    var selectLang = function selectLang(value) {
      editor.change(function (change) {
        return change.setNodeByKey(node.key, {
          data: {
            syntax: value
          }
        });
      });
    };

    return React.createElement(CodeblockContainer, null, React.createElement(CodeblockLang, {
      contentEditable: false
    }, React.createElement(_antd.Select, {
      showSearch: true,
      placeholder: "Language",
      onSelect: selectLang,
      style: {
        minWidth: "80px"
      },
      defaultValue: syntax || "TXT",
      size: "small"
    }, Object.keys(_components.languages).filter(function (lang) {
      return _components.languages[lang].title;
    }).map(function (lang) {
      return React.createElement(Option, {
        value: lang,
        key: lang
      }, _components.languages[lang].title);
    }))), React.createElement("pre", null, React.createElement("code", attributes, children)));
  };

  CodeBlockComponent.displayName = "codeblock-node";
  return CodeBlockComponent;
};

exports.codeBlockNode = codeBlockNode;

var codeLineNode = function codeLineNode() {
  var CodeLineComponent = function CodeLineComponent(_ref2) {
    var attributes = _ref2.attributes,
        children = _ref2.children;
    return React.createElement("div", attributes, children);
  };

  CodeLineComponent.displayName = "codeline-node";
  return CodeLineComponent;
};

exports.codeLineNode = codeLineNode;