"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var React = _interopRequireWildcard(require("react"));

var _antd = require("antd");

var _slateHelperInlineLinks = _interopRequireDefault(require("@canner/slate-helper-inline-links"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _default(options) {
  var LinkNode = function LinkNode(_ref) {
    var attributes = _ref.attributes,
        children = _ref.children,
        node = _ref.node,
        editor = _ref.editor;

    var removeLink = function removeLink() {
      editor.change(function (change) {
        return (0, _slateHelperInlineLinks.default)(change.moveToRangeOf(node), node.type);
      });
    };

    return React.createElement(_antd.Tooltip, {
      title: React.createElement("span", null, options.getHref(node), React.createElement(_antd.Icon, {
        type: "close-circle",
        theme: "outlined",
        style: {
          marginLeft: "5px"
        },
        onClick: removeLink
      }))
    }, React.createElement("a", _extends({}, attributes, {
      href: options.getHref(node),
      "data-slate-type": "link"
    }), children));
  };

  LinkNode.displayName = "link-node";
  return LinkNode;
}