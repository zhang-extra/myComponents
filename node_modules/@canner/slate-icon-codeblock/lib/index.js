"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CodeBlockPlugin = void 0;

var React = _interopRequireWildcard(require("react"));

var _slate = require("slate");

var _antd = require("antd");

var _slateIconShared = _interopRequireDefault(require("@canner/slate-icon-shared"));

var _slateEditCode = _interopRequireDefault(require("slate-edit-code"));

var _blocks = require("@canner/slate-constant/lib/blocks");

var _codeBlockNode = require("@canner/slate-editor-renderer/lib/codeBlockNode");

var _components = require("prismjs/components.json");

var _dec, _class, _class2, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Option = _antd.Select.Option;

var CodeBlockPlugin = function CodeBlockPlugin(opt) {
  var options = Object.assign({
    codeType: _blocks.CODE,
    codeLineType: _blocks.CODE_LINE,
    getSyntax: function getSyntax(node) {
      return node.data.get("syntax");
    }
  }, opt);
  return {
    renderNode: function renderNode(props) {
      if (props.node.type === options.codeType) {
        return (0, _codeBlockNode.codeBlockNode)(options)(props);
      } else if (props.node.type === options.codeLineType) {
        return (0, _codeBlockNode.codeLineNode)()(props);
      }
    }
  };
};

exports.CodeBlockPlugin = CodeBlockPlugin;
var FormItem = _antd.Form.Item;

var _default = (_dec = _antd.Form.create(), _dec(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  _inherits(CodeBlock, _React$Component);

  function CodeBlock(props) {
    var _this;

    _classCallCheck(this, CodeBlock);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CodeBlock).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "typeName", void 0);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onClick", function (e) {
      var _this$props = _this.props,
          change = _this$props.change,
          onChange = _this$props.onChange;

      var haveCodeBlock = _this.codePlugin.utils.isInCodeBlock(change.value);

      e.preventDefault();

      if (haveCodeBlock) {
        onChange(_this.codePlugin.changes.unwrapCodeBlock(change, _blocks.PARAGRAPH));
      } else {
        // open popup
        _this.setState({
          showModal: true
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClickChange", function (visible) {
      if (!visible) _this.handleCancel();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleCancel", function () {
      _this.props.form.resetFields();

      _this.setState({
        showModal: false
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleSelected", function (lang) {
      var _this$props2 = _this.props,
          onChange = _this$props2.onChange,
          change = _this$props2.change,
          syntaxKey = _this$props2.syntaxKey;
      var newChange = change;

      if (lang) {
        newChange = change.setBlocks({
          data: _defineProperty({}, syntaxKey, lang)
        });
      }

      onChange(_this.codePlugin.changes.wrapCodeBlock(newChange));

      _this.handleCancel();
    });

    _this.state = {
      showModal: false
    };
    _this.typeName = _this.props.type || _blocks.CODE;
    _this.codePlugin = (0, _slateEditCode.default)({
      onlyIn: function onlyIn(node) {
        return node.type === _this.typeName;
      }
    });
    return _this;
  }

  _createClass(CodeBlock, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var getFieldDecorator = this.props.form.getFieldDecorator;

      var _this$props3 = this.props,
          change = _this$props3.change,
          icon = _this$props3.icon,
          rest = _objectWithoutProperties(_this$props3, ["change", "icon"]);

      var showModal = this.state.showModal;

      var onClick = function onClick(e) {
        return _this2.onClick(e);
      };

      var content = React.createElement("div", {
        style: {
          minWidth: "200px"
        }
      }, React.createElement(_antd.Form, {
        horizontal: "true"
      }, React.createElement(FormItem, {
        label: "Code Language",
        hasFeedback: true
      }, React.createElement(_antd.Select, {
        onSelect: this.handleSelected,
        placeholder: "Language (optional)"
      }, Object.keys(_components.languages).filter(function (lang) {
        return _components.languages[lang].title;
      }).map(function (lang) {
        return React.createElement(Option, {
          value: lang,
          key: lang
        }, _components.languages[lang].title);
      })))));
      return React.createElement("div", {
        style: {
          display: "inline-block"
        }
      }, React.createElement(_antd.Popover, {
        visible: showModal,
        title: "Add Code Block",
        placement: "bottom",
        content: content,
        trigger: "click",
        onVisibleChange: this.handleClickChange
      }, React.createElement(_slateIconShared.default, _extends({
        type: this.typeName,
        icon: icon || "CodeBlock",
        onClick: onClick,
        isActive: this.codePlugin.utils.isInCodeBlock(change.value)
      }, rest))));
    }
  }]);

  return CodeBlock;
}(React.Component), _defineProperty(_class2, "defaultProps", {
  syntaxKey: "syntax"
}), _temp)) || _class);

exports.default = _default;