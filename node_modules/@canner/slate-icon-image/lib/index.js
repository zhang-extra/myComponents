"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ImagePlugin = void 0;

var React = _interopRequireWildcard(require("react"));

var _antd = require("antd");

var _slateIconShared = _interopRequireDefault(require("@canner/slate-icon-shared"));

var _imageUpload = require("@canner/image-upload");

var _reactIntl = require("react-intl");

var _inlines = require("@canner/slate-constant/lib/inlines");

var _imageNode = _interopRequireDefault(require("@canner/slate-editor-renderer/lib/imageNode"));

var _en = _interopRequireDefault(require("@canner/image-upload/lib/locale/en"));

var _en2 = _interopRequireDefault(require("react-intl/locale-data/en"));

var _zh = _interopRequireDefault(require("react-intl/locale-data/zh"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

(0, _reactIntl.addLocaleData)(_toConsumableArray(_en2.default).concat(_toConsumableArray(_zh.default)));

var ImagePlugin = function ImagePlugin(opt) {
  var options = Object.assign({
    type: _inlines.IMAGE,
    getSrc: function getSrc(node) {
      return node.data.get("src");
    },
    getWidth: function getWidth(node) {
      return node.data.get("width");
    },
    getHeight: function getHeight(node) {
      return node.data.get("height");
    }
  }, opt);
  return {
    renderNode: function renderNode(props) {
      if (props.node.type === options.type) return (0, _imageNode.default)(options)(props);
    }
  };
};

exports.ImagePlugin = ImagePlugin;

var ImageInline =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ImageInline, _React$Component);

  function ImageInline(props) {
    var _this;

    _classCallCheck(this, ImageInline);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ImageInline).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "typeName", void 0);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onClick", function (e) {
      e.preventDefault();

      _this.setState({
        isShow: true
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "hidePopover", function () {
      _this.setState({
        isShow: false
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClickChange", function (visible) {
      if (!visible) _this.hidePopover();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onChange", function (value) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          change = _this$props.change,
          imageSrcKey = _this$props.imageSrcKey,
          imageHeightKey = _this$props.imageHeightKey,
          imageWidthKey = _this$props.imageWidthKey;

      var that = _assertThisInitialized(_assertThisInitialized(_this));

      var image = new Image();

      image.onload = function () {
        var _data;

        var height = image.height;
        var width = image.width;
        var ratio;

        if (width > 500) {
          ratio = width / 500;
        }

        onChange(change.insertInline({
          type: "image",
          isVoid: true,
          data: (_data = {}, _defineProperty(_data, imageSrcKey, value), _defineProperty(_data, imageHeightKey, ratio ? height / ratio : height), _defineProperty(_data, imageWidthKey, ratio ? width / ratio : width), _data)
        }).collapseToStartOfNextText().focus());
        that.hidePopover();
      };

      image.src = value[0];
    });

    _this.state = {
      isShow: false
    };
    _this.typeName = _this.props.type || _inlines.IMAGE;
    return _this;
  }

  _createClass(ImageInline, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          icon = _this$props2.icon,
          serviceConfig = _this$props2.serviceConfig,
          galleryConfig = _this$props2.galleryConfig,
          multiple = _this$props2.multiple,
          rest = _objectWithoutProperties(_this$props2, ["icon", "serviceConfig", "galleryConfig", "multiple"]);

      var isShow = this.state.isShow;

      var onClick = function onClick(e) {
        return _this2.onClick(e);
      };

      var content = React.createElement(_reactIntl.IntlProvider, {
        locale: "en",
        defaultLocale: "en",
        messages: _en.default
      }, React.createElement(_imageUpload.Container, {
        serviceConfig: serviceConfig,
        galleryConfig: galleryConfig,
        multiple: multiple,
        onChange: this.onChange,
        closeEditPopup: this.hidePopover,
        editPopup: isShow
      }));
      return React.createElement("div", {
        style: {
          display: "inline-block"
        }
      }, React.createElement(_antd.Popover, {
        visible: isShow,
        title: "Add Image",
        placement: "bottom",
        trigger: "click",
        content: content,
        onVisibleChange: this.handleClickChange
      }, React.createElement(_slateIconShared.default, _extends({
        type: this.typeName,
        icon: icon || "Image",
        onClick: onClick,
        isActive: false
      }, rest))));
    }
  }]);

  return ImageInline;
}(React.Component);

exports.default = ImageInline;

_defineProperty(ImageInline, "defaultProps", {
  imageSrcKey: "src",
  imageHeightKey: "height",
  imageWidthKey: "width"
});