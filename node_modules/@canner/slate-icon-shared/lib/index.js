"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ParagraphPlugin = exports.markAttrs = exports.nodeAttrs = exports.markPlugin = exports.markDecorator = void 0;

var React = _interopRequireWildcard(require("react"));

var _basicMarkDecoration = _interopRequireDefault(require("./basicMarkDecoration"));

var _basicMarkPlugin = _interopRequireDefault(require("./basicMarkPlugin"));

var _blocks = require("@canner/slate-constant/lib/blocks");

var _marks = require("@canner/slate-constant/lib/marks");

var _quillIcons = _interopRequireDefault(require("quill-icons"));

var _commonNode = _interopRequireDefault(require("@canner/slate-editor-renderer/lib/commonNode"));

var _lodash = _interopRequireDefault(require("lodash.omit"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var markDecorator = _basicMarkDecoration.default;
exports.markDecorator = markDecorator;
var markPlugin = _basicMarkPlugin.default;
exports.markPlugin = markPlugin;
var nodeAttrs = {
  textAlign: function textAlign(node) {
    return node.data.get("align");
  },
  paddingLeft: function paddingLeft(node) {
    return node.data.get("indent") ? "".concat(3 * node.data.get("indent"), "em") : undefined;
  },
  lineHeight: function lineHeight(node) {
    return node.data.get("lineHeight");
  },
  width: function width(node) {
    return node.data.get("width");
  },
  height: function height(node) {
    return node.data.get("height");
  }
};
exports.nodeAttrs = nodeAttrs;
var markAttrs = {
  backgroundColor: function backgroundColor(mark) {
    return mark.data.getIn(["color", "color"]);
  },
  color: function color(mark) {
    return mark.data.getIn(["color", "color"]);
  },
  fontSize: function fontSize(mark) {
    return mark.data.get(_marks.FONTSIZE);
  },
  letterSpacing: function letterSpacing(mark) {
    return mark.data.get(_marks.LETTERSPACING);
  }
};
exports.markAttrs = markAttrs;

var ParagraphPlugin = function ParagraphPlugin(opt) {
  var options = Object.assign(_objectSpread({
    type: _blocks.PARAGRAPH,
    tagName: "p"
  }, nodeAttrs), opt);
  return {
    renderNode: function renderNode(props) {
      if (props.node.type === options.type) return (0, _commonNode.default)(options.tagName, (0, _lodash.default)(options, ["type", "tagName"]))(props);
    }
  };
};

exports.ParagraphPlugin = ParagraphPlugin;

var ToolbarIcon =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ToolbarIcon, _React$Component);

  function ToolbarIcon() {
    _classCallCheck(this, ToolbarIcon);

    return _possibleConstructorReturn(this, _getPrototypeOf(ToolbarIcon).apply(this, arguments));
  }

  _createClass(ToolbarIcon, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          type = _this$props.type,
          icon = _this$props.icon,
          onClick = _this$props.onClick,
          disabled = _this$props.disabled,
          isActive = _this$props.isActive,
          disableClassName = _this$props.disableClassName,
          activeClassName = _this$props.activeClassName,
          activeStrokeClassName = _this$props.activeStrokeClassName,
          activeFillClassName = _this$props.activeFillClassName,
          activeEvenClassName = _this$props.activeEvenClassName,
          activeTransparentClassName = _this$props.activeTransparentClassName,
          activeStrokeMitterClassName = _this$props.activeStrokeMitterClassName,
          activeColorLabelClassName = _this$props.activeColorLabelClassName,
          activeThinClassName = _this$props.activeThinClassName,
          strokeClassName = _this$props.strokeClassName,
          fillClassName = _this$props.fillClassName,
          evenClassName = _this$props.evenClassName,
          transparentClassName = _this$props.transparentClassName,
          strokeMitterClassName = _this$props.strokeMitterClassName,
          colorLabelClassName = _this$props.colorLabelClassName,
          thinClassName = _this$props.thinClassName,
          className = _this$props.className,
          colorStyle = _this$props.colorStyle,
          onChange = _this$props.onChange;
      var iconClassName = isActive ? activeClassName : className;
      var iconStrokeClassName = isActive ? activeStrokeClassName : strokeClassName;
      var iconStrokeMitterClassName = isActive ? activeStrokeMitterClassName : strokeMitterClassName;
      var iconFillClassName = isActive ? activeFillClassName : fillClassName;
      var iconEvenClassName = isActive ? activeEvenClassName : evenClassName;
      var iconColorLabelClassName = isActive ? activeColorLabelClassName : colorLabelClassName;
      var iconTransparentClassName = isActive ? activeTransparentClassName : transparentClassName;
      var iconThinClassName = isActive ? activeThinClassName : thinClassName;
      var fontElement = React.createElement(_quillIcons.default[icon], Object.assign({
        onChange: onChange,
        colorStyle: colorStyle,
        className: disabled ? (0, _classnames.default)(iconClassName, disableClassName) : iconClassName,
        strokeClassName: iconStrokeClassName,
        strokeMitterClassName: iconStrokeMitterClassName,
        fillClassName: iconFillClassName,
        evenClassName: iconEvenClassName,
        colorLabelClassName: iconColorLabelClassName,
        transparentClassName: iconTransparentClassName,
        thinClassName: iconThinClassName
      }));
      return React.createElement("span", {
        key: type,
        onClick: onClick,
        onMouseDown: function onMouseDown(e) {
          return e.preventDefault();
        },
        "data-active": isActive || false
      }, fontElement);
    }
  }]);

  return ToolbarIcon;
}(React.Component);

exports.default = ToolbarIcon;