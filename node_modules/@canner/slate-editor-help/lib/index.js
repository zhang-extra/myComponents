"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _antd = require("antd");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var hotKeyColumns = [{
  title: "Action",
  dataIndex: "action",
  fixed: true
}, {
  title: "Hot Key",
  dataIndex: "hotKey"
}];
var formattingColumns = [{
  title: "Action",
  dataIndex: "action",
  fixed: true
}, {
  title: "Formatting Keys",
  dataIndex: "formattingKey"
}];
var cmdHotKeyData = [{
  key: "copy",
  action: "Copy",
  hotKey: React.createElement("span", null, React.createElement("kbd", null, "CMD"), " + ", React.createElement("kbd", null, "c"))
}, {
  key: "cut",
  action: "Cut",
  hotKey: React.createElement("span", null, React.createElement("kbd", null, "CMD"), " + ", React.createElement("kbd", null, "x"))
}, {
  key: "paste",
  action: "Paste",
  hotKey: React.createElement("span", null, React.createElement("kbd", null, "CMD"), " + ", React.createElement("kbd", null, "v"))
}, {
  key: "undo",
  action: "Undo",
  hotKey: React.createElement("span", null, React.createElement("kbd", null, "CMD"), " + ", React.createElement("kbd", null, "z"))
}, {
  key: "bold",
  action: "Bold",
  hotKey: React.createElement("span", null, React.createElement("kbd", null, "CMD"), " + ", React.createElement("kbd", null, "b"))
}, {
  key: "italic",
  action: "Italic",
  hotKey: React.createElement("span", null, React.createElement("kbd", null, "CMD"), " + ", React.createElement("kbd", null, "i"))
}, {
  key: "underline",
  action: "Underline",
  hotKey: React.createElement("span", null, React.createElement("kbd", null, "CMD"), " + ", React.createElement("kbd", null, "u"))
}, {
  key: "exitCode",
  action: "Exit Code Block",
  hotKey: React.createElement("span", null, React.createElement("kbd", null, "CMD"), " + ", React.createElement("kbd", null, "Enter"), " in code blocks")
}];
var optHotKeyData = [{
  key: "strikethrough",
  action: "Strikethrough",
  hotKey: React.createElement("span", null, React.createElement("kbd", null, "CMD"), " + ", React.createElement("kbd", null, "Opt"), " + ", React.createElement("kbd", null, "d"))
}, {
  key: "boldItalic",
  action: "Bold + Italic",
  hotKey: React.createElement("span", null, React.createElement("kbd", null, "CMD"), " + ", React.createElement("kbd", null, "Opt"), " + ", React.createElement("kbd", null, "b"))
}, {
  key: "header1",
  action: "Header 1",
  hotKey: React.createElement("span", null, React.createElement("kbd", null, "Ctrl"), " + ", React.createElement("kbd", null, "Opt"), " + ", React.createElement("kbd", null, "1"))
}, {
  key: "header2",
  action: "Header 2",
  hotKey: React.createElement("span", null, React.createElement("kbd", null, "Ctrl"), " + ", React.createElement("kbd", null, "Opt"), " + ", React.createElement("kbd", null, "2"))
}, {
  key: "header3",
  action: "Header 3",
  hotKey: React.createElement("span", null, React.createElement("kbd", null, "Ctrl"), " + ", React.createElement("kbd", null, "Opt"), " + ", React.createElement("kbd", null, "3"))
}, {
  key: "blockquote",
  action: "Blockquote",
  hotKey: React.createElement("span", null, React.createElement("kbd", null, "Ctrl"), " + ", React.createElement("kbd", null, "opt"), " + ", React.createElement("kbd", null, "q"))
}];
var formattingData = [{
  key: "blockquote",
  action: "Blockquote",
  formattingKey: ">[space]"
}, {
  key: "codeblock-inline",
  action: "Code Block (Inline)",
  formattingKey: "[space * 4]"
}, {
  key: "codeblock",
  action: "Code Block",
  formattingKey: "[` * 3][space] or [` * 3][lang][space]"
}, {
  key: "header",
  action: "Header 1 - 6",
  formattingKey: "[# * 1~6][space]"
}, {
  key: "hr",
  action: "Horizontal Line",
  formattingKey: "***[space] or --- [space]"
}, {
  key: "ul",
  action: "Unordered List",
  formattingKey: "*[space] or +[space] or -[space]"
}, {
  key: "ol",
  action: "Ordered List",
  formattingKey: "1.[space]"
}];
var formattingInlineData = [{
  key: "strikethrough",
  action: "Strikethrough",
  formattingKey: "~[strikethrough]~[space]"
}, {
  key: "bold",
  action: "Bold",
  formattingKey: "__[strong]__[space] or **[strong]**[space]"
}, {
  key: "italic",
  action: "Italic",
  formattingKey: "_[italic]_[space] or *[italic]*[space]"
}, {
  key: "boldItalic",
  action: "Bold + Italic",
  formattingKey: "___[strong + italic]___[space] or ***[strong + italic]***[space]"
}, {
  key: "link",
  action: "Link",
  formattingKey: '[example](http://example.com "Optional title")[space]'
}, {
  key: "image",
  action: "Image",
  formattingKey: '![example](http://example.com "Optional title")[space]'
}];

var HelpMenu =
/*#__PURE__*/
function (_React$Component) {
  _inherits(HelpMenu, _React$Component);

  function HelpMenu() {
    _classCallCheck(this, HelpMenu);

    return _possibleConstructorReturn(this, _getPrototypeOf(HelpMenu).apply(this, arguments));
  }

  _createClass(HelpMenu, [{
    key: "render",
    value: function render() {
      return React.createElement("div", null, React.createElement("h3", null, "Keyboard Shortcuts"), React.createElement("h4", null, "Default shortcuts. Command + key:"), React.createElement(_antd.Table, {
        columns: hotKeyColumns,
        dataSource: cmdHotKeyData,
        size: "small",
        pagination: false
      }), React.createElement("h4", {
        style: {
          marginTop: "10px"
        }
      }, "Additional shortcuts. Control + Option + key:"), React.createElement(_antd.Table, {
        columns: hotKeyColumns,
        dataSource: optHotKeyData,
        size: "small",
        pagination: false
      }), React.createElement("h4", {
        style: {
          marginTop: "10px"
        }
      }, "Formatting shortcuts.", " ", React.createElement("b", null, "Start a new paragraph with the shortcut and press (one or many) Space to apply the formatting.")), React.createElement(_antd.Table, {
        columns: formattingColumns,
        dataSource: formattingData,
        size: "small",
        pagination: false
      }), React.createElement("h4", {
        style: {
          marginTop: "10px"
        }
      }, "Inline Formatting shortcuts.", " ", React.createElement("b", null, "Use these shortcuts to apply inline style changes.")), React.createElement(_antd.Table, {
        columns: formattingColumns,
        dataSource: formattingInlineData,
        size: "small",
        pagination: false
      }));
    }
  }]);

  return HelpMenu;
}(React.Component);

exports.default = HelpMenu;