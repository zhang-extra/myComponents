'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ImageLoader = function (_React$Component) {
  _inherits(ImageLoader, _React$Component);

  function ImageLoader(props) {
    _classCallCheck(this, ImageLoader);

    var _this = _possibleConstructorReturn(this, (ImageLoader.__proto__ || Object.getPrototypeOf(ImageLoader)).call(this, props));

    _this.reload = _this.reload.bind(_this);

    _this.state = {
      isLoading: true,
      isError: false,
      src: null,
      errMsg: null
    };
    return _this;
  }

  _createClass(ImageLoader, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.reload(nextProps);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.reload(this.props);
    }
  }, {
    key: 'reload',
    value: function reload(props) {
      var _this2 = this;

      // initialize
      this.setState({
        isLoading: true,
        isError: false,
        src: null,
        errMsg: null
      });

      var image = new Image();
      image.src = props.src;
      image.onload = function () {
        _this2.setState({
          src: image.src,
          isLoading: false,
          isError: false,
          errMsg: null
        });
        if (props.onLoad) {
          props.onLoad(image);
        }
      };
      image.onerror = function (err) {
        _this2.setState({
          src: null,
          isLoading: false,
          isError: true,
          errMsg: err
        });
        if (props.onError) {
          props.onError(err);
        }
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          loading = _props.loading,
          error = _props.error,
          image = _props.image;
      var _state = this.state,
          src = _state.src,
          isLoading = _state.isLoading,
          isError = _state.isError,
          errMsg = _state.errMsg;


      if (loading && isLoading) {
        return loading();
      } else if (error && isError && errMsg) {
        return error(errMsg);
      } else if (src && image) {
        return image({ src: src });
      } else if (src) {
        return React.createElement('img', _extends({}, this.props, { src: src }));
      }

      return null;
    }
  }]);

  return ImageLoader;
}(React.Component);

exports.default = ImageLoader;