"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BlockquotePlugin = void 0;

var React = _interopRequireWildcard(require("react"));

var _slateIconShared = _interopRequireWildcard(require("@canner/slate-icon-shared"));

var _slateHelperBlockQuote = _interopRequireWildcard(require("@canner/slate-helper-block-quote"));

var _blocks = require("@canner/slate-constant/lib/blocks");

var _slateEditBlockquote = _interopRequireDefault(require("slate-edit-blockquote"));

var _commonNode = _interopRequireDefault(require("@canner/slate-editor-renderer/lib/commonNode"));

var _lodash = _interopRequireDefault(require("lodash.omit"));

var _isHotkey = _interopRequireDefault(require("is-hotkey"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BlockquotePlugin = function BlockquotePlugin(opt) {
  var options = Object.assign(_objectSpread({
    type: _blocks.BLOCKQUOTE,
    tagName: "blockquote"
  }, _slateIconShared.nodeAttrs), opt);
  return {
    renderNode: function renderNode(props) {
      if (props.node.type === options.type) return (0, _commonNode.default)(options.tagName, (0, _lodash.default)(options, ["type", "tagName"]))(props);
    },
    onKeyDown: function onKeyDown(event, change) {
      if ((0, _isHotkey.default)("ctrl+opt+q", event)) {
        return (0, _slateHelperBlockQuote.default)(change, {
          type: options.type
        });
      }
    }
  };
};

exports.BlockquotePlugin = BlockquotePlugin;

var Blockquote =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Blockquote, _React$Component);

  function Blockquote(props) {
    var _this;

    _classCallCheck(this, Blockquote);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Blockquote).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "typeName", void 0);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onClick", function (e) {
      var _this$props = _this.props,
          change = _this$props.change,
          onChange = _this$props.onChange;
      e.preventDefault();
      onChange((0, _slateHelperBlockQuote.default)(change, {
        type: _this.typeName
      }));
    });

    _this.typeName = props.type || _blocks.BLOCKQUOTE; // change to customize type

    _slateHelperBlockQuote.DEFAULT.type = _this.typeName;
    _this.blockquote = (0, _slateEditBlockquote.default)(_slateHelperBlockQuote.DEFAULT).utils;
    return _this;
  }

  _createClass(Blockquote, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          change = _this$props2.change,
          icon = _this$props2.icon,
          rest = _objectWithoutProperties(_this$props2, ["change", "icon"]);

      var onClick = function onClick(e) {
        return _this2.onClick(e);
      };

      return React.createElement(_slateIconShared.default, _extends({
        type: this.typeName,
        icon: icon || "Blockquote",
        onClick: onClick,
        isActive: this.blockquote.isSelectionInBlockquote(change.value)
      }, rest));
    }
  }]);

  return Blockquote;
}(React.Component);

exports.default = Blockquote;