"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.VideoContiner = void 0;

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _slateIconShared = require("@canner/slate-icon-shared");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  src: ", ";\n  width: ", ";\n  height: ", ";\n  margin-left: ", ";\n  display: flex;\n  justify-content: ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var VideoContiner = _styledComponents.default.iframe(_templateObject(), function (props) {
  return props.src;
}, function (props) {
  return props.width;
}, function (props) {
  return props.height;
}, function (props) {
  return props.indent;
}, function (props) {
  if (props.align === "center") return "center";else if (props.align === "right") return "flex-end";
  return "flex-start";
});

exports.VideoContiner = VideoContiner;

var defaultAttrs = _objectSpread({
  id: function id(node) {
    return node.data.get("id");
  }
}, _slateIconShared.nodeAttrs);

function _default() {
  var inlineType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "video";
  var stylesAttr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultAttrs;
  return {
    deserialize: function deserialize(el) {
      if (inlineType && el.tagName && el.tagName.toLowerCase() === "iframe") {
        return {
          object: "inline",
          type: inlineType,
          isVoid: true
        };
      }
    },
    serialize: function serialize(obj) {
      if (obj.object == "inline" && obj.type === inlineType) {
        var align = stylesAttr.textAlign(obj);
        var indent = stylesAttr.paddingLeft(obj);
        var width = stylesAttr.width(obj) || 560;
        var height = stylesAttr.height(obj) || 315;
        var id = stylesAttr.id(obj);
        var link;

        if (inlineType === "youtube") {
          link = "https://www.youtube.com/embed/".concat(id);
        } else if (inlineType === "dailymotion") {
          link = "https://www.dailymotion.com/embed/video/".concat(id);
        } else if (inlineType === "vimeo") {
          link = "https://player.vimeo.com/video/".concat(id);
        } else if (inlineType === "youku") {
          link = "https://player.youku.com/embed/".concat(id);
        }

        return _react.default.createElement(VideoContiner, {
          align: align,
          width: width,
          height: height,
          indent: indent,
          src: link
        });
      }
    }
  };
}