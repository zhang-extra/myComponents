"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _react = _interopRequireDefault(require("react"));

var _slateEditCode = _interopRequireDefault(require("slate-edit-code"));

var _blocks = require("@canner/slate-constant/lib/blocks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(opt) {
  var options = Object.assign({
    codeBlockType: _blocks.CODE,
    codeLineType: _blocks.CODE_LINE,
    getSyntax: function getSyntax(node) {
      return node.data.get("syntax");
    }
  }, opt);
  var codePlugin = (0, _slateEditCode.default)({
    onlyIn: function onlyIn(node) {
      return node.type === options.codeBlockType;
    }
  });
  return {
    deserialize: function deserialize(el) {
      if (el.tagName && el.tagName.toLowerCase() === "pre") {
        var cls = el.childNodes[0].className;
        var matched = cls && cls.match(/(?:lang|language)-(\w+)/);
        var codeBlockNode = codePlugin.utils.deserializeCode(el.textContent);

        if (matched) {
          var codeBlock = codeBlockNode.toJSON();
          codeBlock.data = {
            syntax: matched[1]
          };
          return codeBlock;
        }

        return codeBlockNode;
      }
    },
    serialize: function serialize(obj, children) {
      if (obj.object == "block" && obj.type === options.codeLineType) {
        return _react.default.createElement("div", null, children);
      } else if (obj.object == "block" && obj.type === options.codeBlockType) {
        var syntax = options.getSyntax(obj);
        var props = {
          className: syntax && "lang-".concat(syntax)
        };
        return _react.default.createElement("pre", null, _react.default.createElement("code", props, children));
      }
    }
  };
}