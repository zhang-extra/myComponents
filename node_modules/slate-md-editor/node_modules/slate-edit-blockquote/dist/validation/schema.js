'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slate = require('slate');

var _slateSchemaViolations = require('slate-schema-violations');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Create a schema definition with rules to normalize blockquotes
 */
function schema(opts) {
    return {
        blocks: _defineProperty({}, opts.type, {
            nodes: [{
                objects: ['block']
            }],
            normalize: function normalize(change, violation, context) {
                switch (violation) {
                    case _slateSchemaViolations.CHILD_OBJECT_INVALID:
                        return containBlocks(opts, change, context);
                    default:
                        return undefined;
                }
            }
        })
    };
}

/**
 *  Ensures that blockquotes always contain blocks.
 */
function containBlocks(opts, change, context) {
    var toWrap = context.node.nodes.filter(function (n) {
        return n.object !== 'block';
    });

    if (toWrap.isEmpty()) {
        return undefined;
    }

    // Wrap text/inline nodes in default block
    var wrapper = _slate.Block.create({
        type: opts.typeDefault,
        nodes: []
    });

    change.insertNodeByKey(context.node.key, 0, wrapper,
    // Be careful of Slate's core schema removing inlines or blocks when
    // a block contains a mix of them.
    { normalize: false });

    toWrap.forEach(function (child, index) {
        var isLast = index === toWrap.size - 1;
        change.moveNodeByKey(child.key, wrapper.key, index, {
            normalize: isLast
        });
    });

    return change;
}

exports.default = schema;