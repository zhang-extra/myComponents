'use strict';

var _require = require('immutable'),
    List = _require.List;

var _require2 = require('../../'),
    Serializer = _require2.Serializer,
    Deserializer = _require2.Deserializer,
    Block = _require2.Block,
    BLOCKS = _require2.BLOCKS;

var reBlock = require('../re/block');
var liquid = require('../../liquid');

/**
 * Return true if a type if the closing tag.
 * @param  {String} tag
 * @return {Boolean}
 */
function isClosingTag(tag) {
    return tag.indexOf('end') === 0;
}

/**
 * Return true if a type if the closing tag of another type
 * @param  {String} type
 * @return {Boolean}
 */
function isClosingTagFor(tag, forTag) {
    return tag.indexOf('end' + forTag) === 0;
}

/**
 * Serialize a templating block to markdown
 * @type {Serializer}
 */
var serialize = Serializer().matchType(BLOCKS.TEMPLATE_BLOCK).then(function (state) {
    var node = state.peek();
    var data = node.data;

    var tag = data.get('tag');
    var props = data.get('props');
    var inner = state.serialize(node.nodes);

    var startTag = liquid.stringifyTag({ tag: tag, props: props });
    var endTag = liquid.stringifyTag({ tag: 'end' + tag });

    return state.shift().write(startTag + '\n' + inner + '\n' + endTag + '\n\n');
});

/**
 * Deserialize a templating block to a node.
 * @type {Deserializer}
 */
var deserialize = Deserializer().matchRegExp(reBlock.templateBlock, function (state, match) {
    if (state.getProp('template') === false) {
        return;
    }

    var text = match[1].trim();
    var tagData = liquid.parseTag(text);

    var node = Block.create({
        type: BLOCKS.TEMPLATE_BLOCK,
        data: tagData,
        nodes: List([state.genText()])
    });

    // This node is temporary
    if (isClosingTag(tagData.tag)) {
        return state.push(node);
    }

    // By default it'll add this node as a single node.
    state = state.push(node);

    var resultState = state.lex({
        stopAt: function stopAt(newState) {
            // What nodes have been added in this iteration?
            var added = newState.nodes.skip(state.nodes.size);

            var between = added.takeUntil(function (child) {
                return child.type == BLOCKS.TEMPLATE_BLOCK && isClosingTagFor(child.data.get('tag'), tagData.tag);
            });

            if (between.size == added.size) {
                return;
            }

            // We skip the default node.
            var beforeNodes = state.nodes.butLast();
            var afterNodes = added.skip(between.size);

            return newState.merge({
                nodes: beforeNodes.push(node.merge({
                    isVoid: false,
                    nodes: between.size == 0 ? List([state.genText()]) : between
                })).concat(afterNodes).filterNot(function (child) {
                    return child.type == BLOCKS.TEMPLATE_BLOCK && isClosingTag(child.data.get('tag'));
                })
            });
        }
    });

    return resultState;
});

module.exports = { serialize: serialize, deserialize: deserialize };