'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ImageLoader = function (_React$PureComponent) {
  _inherits(ImageLoader, _React$PureComponent);

  function ImageLoader() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ImageLoader);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ImageLoader.__proto__ || Object.getPrototypeOf(ImageLoader)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isLoading: true,
      isError: false,
      src: null,
      width: null,
      height: null,
      errMsg: null
    }, _this.reload = function (props) {
      // initialize
      _this.setState({
        isLoading: true,
        isError: false,
        src: null,
        errMsg: null
      });

      var image = new Image();

      image.src = props.src;
      image.onload = function () {
        _this.setState({
          src: image.src,
          width: image.width,
          height: image.height,
          isLoading: false,
          isError: false,
          errMsg: null
        });
        if (props.onLoad) {
          props.onLoad(image);
        }
      };
      image.onerror = function (err) {
        _this.setState({
          src: null,
          width: null,
          height: null,
          isLoading: false,
          isError: true,
          errMsg: err
        });
        if (props.onError) {
          props.onError(err);
        }
      };
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ImageLoader, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      // reload only when image src is changed.
      if (this.props.src !== nextProps.src) this.reload(nextProps);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.reload(this.props);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          loading = _props.loading,
          error = _props.error,
          image = _props.image,
          style = _props.style,
          className = _props.className;
      var _state = this.state,
          src = _state.src,
          width = _state.width,
          height = _state.height,
          isLoading = _state.isLoading,
          isError = _state.isError,
          errMsg = _state.errMsg;


      if (loading && isLoading) {
        return loading();
      } else if (error && isError && errMsg) {
        return error(errMsg);
      } else if (src && image) {
        return image({ src: src, width: width, height: height });
      } else if (src) {
        return React.createElement('img', { src: src, style: style, className: className, width: width, height: height });
      }

      return null;
    }
  }]);

  return ImageLoader;
}(React.PureComponent);

exports.default = ImageLoader;