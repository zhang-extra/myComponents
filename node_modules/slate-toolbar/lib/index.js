"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactWindowDetectDimensions = _interopRequireDefault(require("react-window-detect-dimensions"));

var _slateIconBold = _interopRequireWildcard(require("@canner/slate-icon-bold"));

var _slateIconItalic = _interopRequireWildcard(require("@canner/slate-icon-italic"));

var _slateIconUnderline = _interopRequireWildcard(require("@canner/slate-icon-underline"));

var _slateIconShared = require("@canner/slate-icon-shared");

var _getSelectionRange = require("get-selection-range");

var _container = require("./container");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultPlugins = [(0, _slateIconShared.ParagraphPlugin)(), (0, _slateIconBold.BoldPlugin)(), (0, _slateIconItalic.ItalicPlugin)(), (0, _slateIconUnderline.UnderlinePlugin)()];

var _default = function _default() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$icons = options.icons,
      icons = _options$icons === void 0 ? [_slateIconBold.default, _slateIconItalic.default, _slateIconUnderline.default] : _options$icons,
      _options$position = options.position,
      position = _options$position === void 0 ? "top" : _options$position,
      _options$disabledType = options.disabledTypes,
      disabledTypes = _options$disabledType === void 0 ? [] : _options$disabledType;
  var i = 0;
  return function (Editor) {
    var Toolbar =
    /*#__PURE__*/
    function (_React$Component) {
      _inherits(Toolbar, _React$Component);

      function Toolbar(props) {
        var _this;

        _classCallCheck(this, Toolbar);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(Toolbar).call(this, props));

        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "toolbarContainerNode", void 0);

        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "containerNode", void 0);

        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderButton", function (Type) {
          var _this$props = _this.props,
              value = _this$props.value,
              onChange = _this$props.onChange;

          if (Type === "divider") {
            return React.createElement(_container.Divider, {
              key: i++
            });
          }

          return React.createElement(_container.IconContainer, null, React.createElement(Type, {
            change: value.change(),
            onChange: onChange,
            key: i++,
            className: "__slate-toolbar-slateToolbarItem",
            strokeClassName: "qlStroke",
            strokeMitterClassName: "qlStrokeMitter",
            fillClassName: "qlFill",
            evenClassName: "qlEven",
            colorLabelClassName: "qlColorLabel",
            thinClassName: "qlThin",
            activeStrokeMitterClassName: "qlStrokeMitterActive",
            activeClassName: "__slate-toolbar-slateToolbarItem",
            activeStrokeClassName: "qlStrokeActive",
            activeFillClassName: "qlFillActive",
            activeThinClassName: "qlThinActive",
            activeEvenClassName: "qlEvenActive"
          }));
        });

        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderMenu", function () {
          var value = _this.props.value;
          return value.isExpanded && value.isFocused && React.createElement(_container.ToolbarContainer, {
            position: position,
            innerRef: function innerRef(node) {
              return _this.toolbarContainerNode = node;
            }
          }, React.createElement("div", {
            style: {
              display: "block"
            }
          }, icons.length && React.createElement(_container.Item, null, icons.map(_this.renderButton))));
        });

        return _this;
      }

      _createClass(Toolbar, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          window.addEventListener("scroll", function () {
            return _this2.componentDidUpdate();
          });
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          var _this3 = this;

          window.removeEventListener("scroll", function () {
            return _this3.componentDidUpdate();
          });
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          var value = this.props.value;
          var rect = (0, _getSelectionRange.getVisibleSelectionRect)();

          if (!rect || !this.toolbarContainerNode || !this.containerNode) {
            return;
          }

          if (value.blocks.find(function (block) {
            return disabledTypes.find(function (type) {
              return type === value.document.getParent(block.key).type;
            });
          }) || value.blocks.find(function (block) {
            return disabledTypes.find(function (type) {
              return type === block.type;
            });
          })) {
            this.toolbarContainerNode.style.display = "none";
            return;
          }

          this.toolbarContainerNode.style.display = "block"; // $FlowFixMe

          var containerBound = this.containerNode.getBoundingClientRect();
          var containerBoundLeft = containerBound.left,
              containerBoundTop = containerBound.top;
          var left = rect.left + rect.width / 2 - containerBoundLeft - this.toolbarContainerNode.offsetWidth / 2;
          this.toolbarContainerNode.style.left = "".concat(left, "px");

          if (position === "bottom") {
            var top = rect.top - containerBoundTop + this.toolbarContainerNode.offsetHeight;
            this.toolbarContainerNode.style.top = "".concat(top, "px");
          } else if (position === "top") {
            var _top = rect.top - containerBoundTop - this.toolbarContainerNode.offsetHeight;

            this.toolbarContainerNode.style.top = "".concat(_top, "px");
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this4 = this;

          return React.createElement("div", {
            style: {
              position: "relative"
            },
            ref: function ref(node) {
              return _this4.containerNode = node;
            }
          }, this.renderMenu(), React.createElement(Editor, this.props));
        }
      }]);

      return Toolbar;
    }(React.Component);

    return (
      /*#__PURE__*/
      function (_React$Component2) {
        _inherits(SlateToolbarDecorator, _React$Component2);

        function SlateToolbarDecorator() {
          _classCallCheck(this, SlateToolbarDecorator);

          return _possibleConstructorReturn(this, _getPrototypeOf(SlateToolbarDecorator).apply(this, arguments));
        }

        _createClass(SlateToolbarDecorator, [{
          key: "render",
          value: function render() {
            var _this5 = this;

            return React.createElement(_reactWindowDetectDimensions.default, null, function (_ref) {
              var windowWidth = _ref.windowWidth,
                  windowHeight = _ref.windowHeight;
              return React.createElement(Toolbar, _extends({}, _this5.props, {
                plugins: _this5.props.plugins || defaultPlugins,
                windowWidth: windowWidth,
                windowHeight: windowHeight
              }));
            });
          }
        }]);

        return SlateToolbarDecorator;
      }(React.Component)
    );
  };
};

exports.default = _default;