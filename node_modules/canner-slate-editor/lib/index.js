"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _slateReact = require("slate-react");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _menuToolbar = _interopRequireDefault(require("./menuToolbar"));

var _slateToolbar = _interopRequireDefault(require("slate-toolbar"));

var _slateSidebar = _interopRequireDefault(require("slate-sidebar"));

var _slateMdEditor = require("slate-md-editor");

var _slateConstant = require("@canner/slate-constant");

var _slatePasteHtmlPlugin = _interopRequireDefault(require("@canner/slate-paste-html-plugin"));

var _slateIconBlockquote = _interopRequireWildcard(require("@canner/slate-icon-blockquote"));

var _slateIconBold = _interopRequireWildcard(require("@canner/slate-icon-bold"));

var _slateIconCode = _interopRequireWildcard(require("@canner/slate-icon-code"));

var _slateIconClean = _interopRequireDefault(require("@canner/slate-icon-clean"));

var _slateIconCodeblock = require("@canner/slate-icon-codeblock");

var _slateIconTable = require("@canner/slate-icon-table");

var _slateIconFontbgcolor = require("@canner/slate-icon-fontbgcolor");

var _slateIconFontcolor = require("@canner/slate-icon-fontcolor");

var _slateIconHeader = require("@canner/slate-icon-header");

var _slateIconHr = _interopRequireWildcard(require("@canner/slate-icon-hr"));

var _slateIconImage = require("@canner/slate-icon-image");

var _slateIconItalic = _interopRequireWildcard(require("@canner/slate-icon-italic"));

var _slateIconLink = require("@canner/slate-icon-link");

var _slateIconList = require("@canner/slate-icon-list");

var _slateIconStrikethrough = _interopRequireWildcard(require("@canner/slate-icon-strikethrough"));

var _slateIconUnderline = _interopRequireWildcard(require("@canner/slate-icon-underline"));

var _slateIconVideo = require("@canner/slate-icon-video");

var _slateIconShared = require("@canner/slate-icon-shared");

var _slateEditList = _interopRequireDefault(require("slate-edit-list"));

var _slateEditBlockquote = _interopRequireDefault(require("slate-edit-blockquote"));

var _slatePrism = _interopRequireDefault(require("slate-prism"));

var _slateEditCode = _interopRequireDefault(require("slate-edit-code"));

var _slateTrailingBlock = _interopRequireDefault(require("slate-trailing-block"));

require("prismjs/themes/prism.css");

var _slateHelperBlockList = require("@canner/slate-helper-block-list");

var _slateHelperBlockQuote = require("@canner/slate-helper-block-quote");

require("github-markdown-css");

var _dec, _dec2, _class;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n  position: fixed;\n  top: 10px;\n  z-index: 10;\n  width: 100%;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n  padding: 25px;\n  margin-top: ", ";\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  ", " background-color: #FFF;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 1px 1px rgba(0, 0, 0, 0.16);\n  overflow-y: ", ";\n  overflow-x: hidden;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var plugins = [(0, _slateMdEditor.MarkdownPlugin)(), (0, _slatePrism.default)({
  onlyIn: function onlyIn(node) {
    return node.type === "code_block";
  },
  getSyntax: function getSyntax(node) {
    return node.data.get("syntax");
  }
}), (0, _slateEditCode.default)({
  onlyIn: function onlyIn(node) {
    return node.type === "code_block";
  }
}), (0, _slateTrailingBlock.default)(), (0, _slateEditList.default)(_slateHelperBlockList.DEFAULT), (0, _slateEditBlockquote.default)(_slateHelperBlockQuote.DEFAULT), (0, _slateIconShared.ParagraphPlugin)(), (0, _slateIconBlockquote.BlockquotePlugin)(), (0, _slateIconBold.BoldPlugin)(), (0, _slateIconCode.CodePlugin)(), (0, _slateIconCodeblock.CodeBlockPlugin)(), (0, _slateIconFontbgcolor.FontBgColorPlugin)({
  backgroundColor: function backgroundColor(mark) {
    return mark.data.get("color") && mark.data.get("color").color;
  }
}), (0, _slateIconFontcolor.FontColorPlugin)({
  color: function color(mark) {
    return mark.data.get("color") && mark.data.get("color").color;
  }
}), (0, _slateIconItalic.ItalicPlugin)(), (0, _slateIconStrikethrough.StrikeThroughPlugin)(), (0, _slateIconUnderline.UnderlinePlugin)(), (0, _slateIconHeader.HeaderOnePlugin)(), (0, _slateIconHeader.HeaderTwoPlugin)(), (0, _slateIconHeader.HeaderThreePlugin)(), (0, _slateIconTable.TablePlugin)(), (0, _slateIconHr.HrPlugin)(), (0, _slateIconImage.ImagePlugin)(), (0, _slateIconLink.LinkPlugin)(), (0, _slateIconList.ListPlugin)(), (0, _slateIconVideo.VideoPlugin)(), (0, _slatePasteHtmlPlugin.default)()];

var Container = _styledComponents.default.div(_templateObject(), function (props) {
  return props.isFull && "\n    position: fixed;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    z-index: 1000\n  ";
}, function (props) {
  return props.isFull ? "scroll" : "hidden";
});

var EditorContainer = _styledComponents.default.div(_templateObject2(), function (props) {
  return props.isFull ? "60px" : "10px";
});

var FixedToolbar = _styledComponents.default.div(_templateObject3());

var toolbarOptions = {
  icons: [_slateIconBold.default, _slateIconItalic.default, _slateIconStrikethrough.default, _slateIconUnderline.default, _slateIconCode.default, _slateIconClean.default],
  position: "top",
  disabledTypes: [_slateConstant.BLOCKS.CODE, _slateConstant.BLOCKS.CODE_LINE, _slateConstant.BLOCKS.HEADING_1, _slateConstant.BLOCKS.HEADING_2, _slateConstant.BLOCKS.HEADING_3, _slateConstant.BLOCKS.HEADING_4, _slateConstant.BLOCKS.HEADING_5, _slateConstant.BLOCKS.HEADING_6]
};
var sidebarOptions = {
  icons: [{
    icon: _slateIconList.OlList,
    title: "Order List"
  }, {
    icon: _slateIconList.UlList,
    title: "Unorder List"
  }, {
    icon: _slateIconHeader.Header1,
    title: "Header One"
  }, {
    icon: _slateIconHeader.Header2,
    title: "Header Two"
  }, {
    icon: _slateIconHr.default,
    title: "Ruler"
  }, {
    icon: _slateIconBlockquote.default,
    title: "Blockquote"
  }]
};

var EditorComponent =
/*#__PURE__*/
function (_React$Component) {
  _inherits(EditorComponent, _React$Component);

  function EditorComponent(props) {
    var _this;

    _classCallCheck(this, EditorComponent);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditorComponent).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "goFull", function () {
      _this.setState({
        isFull: !_this.state.isFull
      });
    });

    _this.state = {
      isFull: false
    };
    return _this;
  }

  _createClass(EditorComponent, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          value = _this$props.value,
          onChange = _this$props.onChange,
          serviceConfig = _this$props.serviceConfig,
          galleryConfig = _this$props.galleryConfig,
          menuToolbarOption = _this$props.menuToolbarOption,
          readOnly = _this$props.readOnly,
          rest = _objectWithoutProperties(_this$props, ["value", "onChange", "serviceConfig", "galleryConfig", "menuToolbarOption", "readOnly"]);

      var isFull = this.state.isFull;
      return readOnly ? React.createElement(CannerEditor, {
        value: value,
        onChange: function onChange(arg) {
          return arg;
        },
        readOnly: readOnly
      }) : React.createElement(Container, _extends({
        isFull: isFull
      }, rest), React.createElement("div", {
        style: {
          position: "relative"
        }
      }, isFull ? React.createElement(FixedToolbar, null, React.createElement(_menuToolbar.default, {
        isFull: true,
        value: value,
        serviceConfig: serviceConfig,
        galleryConfig: galleryConfig,
        menuToolbarOption: menuToolbarOption,
        onChange: onChange,
        goFull: this.goFull
      })) : React.createElement(_menuToolbar.default, {
        serviceConfig: serviceConfig,
        galleryConfig: galleryConfig,
        menuToolbarOption: menuToolbarOption,
        value: value,
        onChange: onChange,
        goFull: this.goFull
      }), React.createElement(EditorContainer, {
        isFull: isFull
      }, React.createElement(CannerEditor, {
        value: value,
        onChange: onChange,
        readOnly: readOnly
      }))));
    }
  }]);

  return EditorComponent;
}(React.Component);

exports.default = EditorComponent;
var CannerEditor = (_dec = (0, _slateToolbar.default)(toolbarOptions), _dec2 = (0, _slateSidebar.default)(sidebarOptions), _dec(_class = _dec2(_class =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(CannerEditor, _React$Component2);

  function CannerEditor() {
    _classCallCheck(this, CannerEditor);

    return _possibleConstructorReturn(this, _getPrototypeOf(CannerEditor).apply(this, arguments));
  }

  _createClass(CannerEditor, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      if (this.props.value === nextProps.value) return false;
      return true;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          value = _this$props2.value,
          onChange = _this$props2.onChange,
          readOnly = _this$props2.readOnly;
      return React.createElement(_slateReact.Editor, {
        className: "markdown-body",
        value: value,
        readOnly: readOnly,
        onChange: onChange,
        plugins: plugins
      });
    }
  }]);

  return CannerEditor;
}(React.Component)) || _class) || _class);