"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _antd = require("antd");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _item = require("./components/item");

var _fullScreen = _interopRequireDefault(require("./components/fullScreen"));

var _slateIconAlign = require("@canner/slate-icon-align");

var _slateIconBlockquote = _interopRequireDefault(require("@canner/slate-icon-blockquote"));

var _slateIconTable = _interopRequireDefault(require("@canner/slate-icon-table"));

var _slateIconCodeblock = _interopRequireDefault(require("@canner/slate-icon-codeblock"));

var _slateIconFontbgcolor = _interopRequireDefault(require("@canner/slate-icon-fontbgcolor"));

var _slateIconFontcolor = _interopRequireDefault(require("@canner/slate-icon-fontcolor"));

var _slateIconHeader = require("@canner/slate-icon-header");

var _slateIconHr = _interopRequireDefault(require("@canner/slate-icon-hr"));

var _slateIconImage = _interopRequireDefault(require("@canner/slate-icon-image"));

var _slateIconIndent = require("@canner/slate-icon-indent");

var _slateIconLink = _interopRequireDefault(require("@canner/slate-icon-link"));

var _slateIconList = require("@canner/slate-icon-list");

var _slateIconUndo = _interopRequireDefault(require("@canner/slate-icon-undo"));

var _slateIconRedo = _interopRequireDefault(require("@canner/slate-icon-redo"));

var _slateIconVideo = _interopRequireDefault(require("@canner/slate-icon-video"));

var _slateEditorHelp = _interopRequireDefault(require("@canner/slate-editor-help"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n  height: 35px;\n  width: 1px;\n  margin: 2px 0;\n  background: #ebebeb;\n  display: inline-block;\n  vertical-align: top;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  display: inline-block;\n  background: transparent;\n  color: #222;\n  cursor: pointer;\n  -webkit-transition: background 0.2s ease 0s;\n  border-bottom: 0.5px solid #ebebeb;\n\n  ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var IconContainer = _styledComponents.default.div(_templateObject(), function (props) {
  return !props.noHover && "\n    &:hover {\n      background: #ebebeb;\n    }\n  ";
});

var Seperator = _styledComponents.default.div(_templateObject2());

var Toolbar =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Toolbar, _React$Component);

  function Toolbar() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Toolbar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Toolbar)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      showMenu: false
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "changeVisibleMenu", function (visible) {
      _this.setState({
        showMenu: visible
      });
    });

    return _this;
  }

  _createClass(Toolbar, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          value = _this$props.value,
          onChange = _this$props.onChange,
          goFull = _this$props.goFull,
          isFull = _this$props.isFull,
          serviceConfig = _this$props.serviceConfig,
          galleryConfig = _this$props.galleryConfig,
          menuToolbarOption = _this$props.menuToolbarOption;
      var showMenu = this.state.showMenu;
      var options = menuToolbarOption || [{
        type: _slateIconUndo.default,
        title: "Undo"
      }, {
        type: _slateIconRedo.default,
        title: "Redo"
      }, "seperator", {
        type: _slateIconHeader.Header1,
        title: "Header One"
      }, {
        type: _slateIconHeader.Header2,
        title: "Header Two"
      }, {
        type: _slateIconHeader.Header3,
        title: "Header Three"
      }, {
        type: _slateIconBlockquote.default,
        title: "Blockquote"
      }, {
        type: _slateIconHr.default,
        title: "Ruler"
      }, "seperator", {
        type: _slateIconAlign.AlignLeft,
        title: "Align Left"
      }, {
        type: _slateIconAlign.AlignCenter,
        title: "Align Center"
      }, {
        type: _slateIconAlign.AlignRight,
        title: "Align Right"
      }, {
        type: _slateIconIndent.Indent,
        title: "Indent"
      }, {
        type: _slateIconIndent.Outdent,
        title: "Outdent"
      }, "seperator", {
        type: _slateIconList.OlList,
        title: "Order List"
      }, {
        type: _slateIconList.UlList,
        title: "Unorder List"
      }, "seperator", {
        type: _slateIconLink.default,
        title: "Link"
      }, {
        type: "image",
        title: "Image"
      }, {
        type: _slateIconVideo.default,
        title: "Video"
      }, {
        type: _slateIconCodeblock.default,
        title: "Code Bloack"
      }, {
        type: _slateIconTable.default,
        title: "Table"
      }, "seperator", {
        type: _slateIconFontcolor.default,
        title: "Font Color"
      }, {
        type: _slateIconFontbgcolor.default,
        title: "Font Background Color"
      }, "seperator", {
        type: "fullScreen",
        title: "Full Screen"
      }, {
        type: "help",
        title: "Help"
      }];
      return React.createElement(_item.Container, null, options.map(function (option, i) {
        var Type = typeof option === "string" ? option : option.type || option;
        var title = option.title;
        if (Type === "seperator") return React.createElement(Seperator, {
          key: i
        });

        if (Type === "fullScreen") {
          return React.createElement(IconContainer, {
            key: i,
            title: title
          }, React.createElement(_fullScreen.default, {
            className: "__canner-editor_topToolbarItem",
            goFull: goFull,
            isFull: isFull
          }));
        }

        if (Type === "help") {
          return React.createElement(IconContainer, {
            noHover: true,
            style: {
              height: "37px"
            },
            key: i,
            title: title
          }, React.createElement(_antd.Icon, {
            type: "question-circle",
            theme: "outlined",
            className: "__canner-editor_topToolbarItem",
            onClick: function onClick() {
              return _this2.changeVisibleMenu(true);
            }
          }), React.createElement(_antd.Modal, {
            visible: showMenu,
            style: {
              width: "800px"
            },
            footer: null,
            onCancel: function onCancel() {
              return _this2.changeVisibleMenu(false);
            },
            title: "Help Menu"
          }, React.createElement(_slateEditorHelp.default, null)));
        } // special plugin


        if (Type === "image") {
          Type = _slateIconImage.default;
        }

        return React.createElement(IconContainer, {
          key: i,
          title: title
        }, React.createElement(Type, {
          change: value.change(),
          onChange: onChange,
          className: "__canner-editor_topToolbarItem",
          disableClassName: "__canner-editor_topToolbarItemDisabled",
          strokeClassName: "qlStroke",
          serviceConfig: Type === _slateIconImage.default && serviceConfig,
          galleryConfig: Type === _slateIconImage.default && galleryConfig,
          strokeMitterClassName: "qlStrokeMitter",
          fillClassName: "qlFill",
          evenClassName: "qlEven",
          colorLabelClassName: "qlColorLabel",
          thinClassName: "qlThin",
          activeStrokeMitterClassName: "qlStrokeMitterActive",
          activeClassName: "__canner-editor_topToolbarItem __canner-editor_topToolbarItemActive",
          activeStrokeClassName: "qlStrokeActive",
          activeFillClassName: "qlFillActive",
          activeThinClassName: "qlThinActive",
          activeEvenClassName: "qlEvenActive"
        }));
      }));
    }
  }]);

  return Toolbar;
}(React.Component);

exports.default = Toolbar;