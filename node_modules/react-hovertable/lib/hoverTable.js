'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _class2, _temp;

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _reactModularTable = require('react-modular-table');

var _dimensions = require('./dimensions');

var _dimensions2 = _interopRequireDefault(_dimensions);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HoverTable = (0, _radium2.default)(_class = (_temp = _class2 = function (_React$Component) {
  _inherits(HoverTable, _React$Component);

  function HoverTable(props) {
    _classCallCheck(this, HoverTable);

    var _this = _possibleConstructorReturn(this, (HoverTable.__proto__ || Object.getPrototypeOf(HoverTable)).call(this, props));

    _this.onClickColumn = _this.onClickColumn.bind(_this);
    _this.onMouseOverColumn = _this.onMouseOverColumn.bind(_this);
    _this.onMouseOutColumn = _this.onMouseOutColumn.bind(_this);

    _this.state = {
      activeRow: null,
      activeCell: null
    };
    return _this;
  }

  _createClass(HoverTable, [{
    key: 'onClickColumn',
    value: function onClickColumn(e, data) {
      this.props.onClick(e, data);
    }
  }, {
    key: 'onMouseOverColumn',
    value: function onMouseOverColumn(e, data) {
      var _props = this.props,
          width = _props.width,
          height = _props.height,
          row = _props.row,
          column = _props.column;

      this.props.onMouseOver(e, data);

      if (!e.target) return;

      // $FlowFixMe
      var x = (data.columnNumber + 1) * width / column;
      // $FlowFixMe
      var y = (data.rowNumber + 1) * height / row;

      this.setState({
        activeRow: data.rowNumber,
        activeCell: data.columnNumber
      });
      if (this.props.showDimension && this.dimensions) {
        this.dimensions.setTranslate(x, y, data);
      }
    }
  }, {
    key: 'onMouseOutColumn',
    value: function onMouseOutColumn(e) {
      this.props.onMouseOut(e);

      this.setState({
        activeRow: null,
        activeCell: null
      });
      if (this.props.showDimension && this.dimensions) {
        this.dimensions.hideDimensions();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props2 = this.props,
          width = _props2.width,
          height = _props2.height,
          row = _props2.row,
          theme = _props2.theme,
          column = _props2.column,
          selectedRow = _props2.selectedRow,
          selectedColumn = _props2.selectedColumn,
          showDimension = _props2.showDimension;
      var _state = this.state,
          activeCell = _state.activeCell,
          activeRow = _state.activeRow;

      // theme style

      var containerStyle = _styles2.default[theme].container;
      var tableStyle = _styles2.default[theme].table;
      var rowStyle = _styles2.default[theme].row;
      var cellOuterStyle = _styles2.default[theme].cellOuter;
      var cellStyle = _styles2.default[theme].cell;

      var rowArr = [].constructor.apply(this, new Array(row));
      var columnArr = [].constructor.apply(this, new Array(column));

      return React.createElement(
        'div',
        { style: [containerStyle, { display: 'inline-block' }] },
        React.createElement(
          'div',
          { style: { position: 'relative' } },
          showDimension ? React.createElement(_dimensions2.default, { theme: theme, ref: function ref(node) {
              _this2.dimensions = node;
            } }) : null,
          React.createElement(
            _reactModularTable.DivTable,
            { width: width, height: height, outerStyle: tableStyle },
            rowArr.map(function (val, rowNumber) {
              return React.createElement(
                _reactModularTable.DivRow,
                { key: rowNumber, style: rowStyle },
                columnArr.map(function (val, columnNumber) {
                  var newCellStyle = {};
                  var active = false;
                  if (rowNumber === activeRow && columnNumber === activeCell) {
                    newCellStyle = Object.assign({}, cellStyle.default, cellStyle.mouseOver);
                  } else if (rowNumber <= activeRow && columnNumber <= activeCell) {
                    newCellStyle = Object.assign({}, cellStyle.default, cellStyle.active);
                  } else {
                    newCellStyle = Object.assign({}, cellStyle.default);
                  }

                  if (rowNumber <= selectedRow && columnNumber <= selectedColumn) {
                    newCellStyle = Object.assign({}, cellStyle.selected);
                    active = true;
                  }

                  return React.createElement(_reactModularTable.DivCell, {
                    key: columnNumber,
                    'data-active': active,
                    outerStyle: cellOuterStyle,
                    style: newCellStyle,
                    onMouseOut: _this2.onMouseOutColumn,
                    onMouseOver: function onMouseOver(e) {
                      return _this2.onMouseOverColumn(e, { rowNumber: rowNumber, columnNumber: columnNumber });
                    },
                    onClick: function onClick(e) {
                      return _this2.onClickColumn(e, { rowNumber: rowNumber, columnNumber: columnNumber });
                    }
                  });
                })
              );
            })
          )
        )
      );
    }
  }]);

  return HoverTable;
}(React.Component), _class2.defaultProps = {
  width: 350,
  height: 350,
  row: 12,
  column: 12,
  showDimension: true,
  theme: 'dark',
  onMouseOver: function onMouseOver(arg) {
    return arg;
  },
  onMouseOut: function onMouseOut(arg) {
    return arg;
  },
  onClick: function onClick(arg) {
    return arg;
  }
}, _temp)) || _class;

exports.default = HoverTable;